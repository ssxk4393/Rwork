query <- "select * from goods"
query <- "select * from goods"
dbGetQuery(conn,query)
dbSendQuery(conn, "insert into goods values(8, '전화기', 4, 450000)")
dbSendUpdate(conn, "insert into goods values(8, '전화기', 4, 450000)")
dbGetQuery(conn, 'select * from goods')
dbSendUpdate(conn, "update goods set name='phone' where code=8")
dbGetQuery(conn, 'select * from goods')
dbSendUpdate(conn, "delete from goods where code=6")
dbGetQuery(conn, 'select * from goods')
dbSendUpdate(conn, "insert into goods values(6, '믹서기, 3, 100000)")
dbGetQuery(conn, 'select * from goods')
dbSendUpdate(conn, "delete from goods where code=8")
dbSendUpdate(conn, "delete from goods where code=7")
dbGetQuery(conn, 'select * from goods')
help("read.csv")
recode <- read.csv("C:\\NCS\\Rwork\\data\\recode.csv", header = T)
help("read.csv")
recode
dbWriteTable(conn, 'goods', recode)
dbGetQuery(conn, 'select * from goods')
dbSendUpdate(conn, "delete from goods where code=7")
str(goods)
goods <- dbGetQuery(conn, 'select * from goods')
str(goods)
price[i] <- goods$su[i] * goods$dan[i]
price <- numeric()      # 빈 vector 만들기
for(i in 1:nrow(goods)){            # 1~ goods의 행의 수까지
price[i] <- goods$su[i] * goods$dan[i]
}
price
goods$price <- price
goods
dbSendUpdate(conn, query)
query <- "create or replace table goods_manager(code int, name varchar(50), su int, dan int, price int)"
dbWriteTable(conn, 'goods_manager', goods)
dbGetQuery(conn, 'select * goods_manager')
dbGetQuery(conn, 'select * from goods_manager')
dbSendUpdate(conn,'drop table goods_manager')
dbGetQuery(conn, 'select * from goods_manager')
dataset <- read.csv(file.choose())          # file.choose --> 파일 선택기. 직접 파일 선택할 수 있음
dataset
str(dataset)
date <- dataset$Date    # dataset에서 날짜 칼럼 가져오
date
year <- str_sub(date,1,4)
library(stringr)
year <- str_sub(date,1,4)
year <- str_sub(date,1,4)
month <- str_sum(date,5,6)
day <- str_sum(date,7,8)
year; month; dat
year; month; dat
year <- str_sub(date,1,4)
month <- str_sub(date,5,6)
day <- str_sub(date,7,8)
year; month; dat
year; month; day
year; month; day
stc_c(year, month, sep="-")
str_c(year, month, sep="-")
sDate <- str_c(year, month, daym sep="-")
sDate <- str_c(year, month, day sep="-")
dbDisconnect(conn)
sDate
sDate <- str_c(year, month, day sep="-")
sDate <- str_c(year, month, day, sep="-")
sDate
as.Date(sDate, '%Y-%m-%d')
sDate <- as.Date(sDate, '%Y-%m-%d')
sDate
class(sDate)
dataset$Date <- sDate
dataset
dataset
query <- "create or replace table customer(udate date, id int, buy int)"
dbSendUpdate(conn, query)
query <- "create or replace table customer(udate date, id int, buy int)"
dbSendUpdate(conn, query)
query <- "create or replace table customer(udate date, id int, buy int)"
dbSendUpdate(conn, query)
query <- "create or replace table customer(udate date, id int, buy int)"
dbSendUpdate(conn, query)
library(DBI)
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jre1.8.0_111')
library(rJava)
library(RJDBC) #
drv <- JDBC(driverClass="com.mysql.jdbc.Driver",
classPath="C:\\NCS\\python\\util\\mysql-connector-java-5.1.40\\mysql-connector-java-5.1.40\\mysql-connector-java-5.1.40-bin.jar")
conn <- dbConnect(drv, "jdbc:mysql://127.0.0.1:3306/work", "scott", "tiger")
dbListFields(conn, "goods") # conn, table name
query <- "create or replace table customer(udate date, id int, buy int)"
dbSendUpdate(conn, query)
dataset
dbWriteTable(conn, 'customer', dataset)
dbGetQuery(conn, 'select * from customer')
customer
dataset
query <- "create or replace table customer(udate date, id int, buy int)"
dbGetQuery(conn, 'select * from customer')
query <- "create or replace table customer(udate date, id int, buy int)"
dbSendUpdate(conn, query)
dbGetQuery(conn, 'select * from customer')
dbWriteTable(conn, 'customer', dataset)
dbGetQuery(conn, 'select * from customer')
dataset
str(customer)
customer<-dbGetQuery(conn, 'select * from customer')
str(customer)
customer
query <- "select Customer_ID, sum(Buy) from customer group by Customer_ID"
query <- "select Customer_ID, sum(Buy) from customer group by Customer_ID"
dbGetQuery(conn, query)
result
result <- dbGetQuery(conn, query)
result
barplot(result$`sum(Buy)`, col=rainbow(nrow(result)),
name.arg = result$Customer_ID, main = "고객별 구매수량")
query <- "select date, sum(buy) from customer group by date"
result2 <- dbGetQuery(conn, query)
result2
barplot(result2$`sum(buy)`, col=rainbow(nrow(result2)),
name.arg = result2$Date, main = "고객별 구매수량")
barplot(result$`sum(Buy)`, col=rainbow(nrow(result)),
names.arg = result$Customer_ID, main = "고객별 구매수량")
barplot(result2$`sum(buy)`, col=rainbow(nrow(result2)),
names.arg = result2$Date, main = "고객별 구매수량")
a <- c(3,4,5)
a
3
a
a <- c(3,4,5,6,7,8,9,0,1,3,2,3,4,5)
a
str(a)
str(a)
a <- c(3,4,5,6,7,8,9,0,1,3,2,3,4,5)
a
str(a)
a <- c(3,4,5,6,7,8,9,0,1,3,2,3,4,5)
a
str(a)
goods
query <- "create or replace table goods_managers(code int, name varchar(50), su int, dan int, price int)"
dbSendUpdate(conn, query)
dbGetQuery(conn, 'select * from goods_managers')
dbGetQuery(conn, 'select * from goods_managers')
dbWriteTable(conn, 'goods_managers', goods)
dbGetQuery(conn, 'select * from goods_managers')
query <- "create or replace table goods_managers(code int, names varchar(50), sus int, dan int, price int)"
dbSendUpdate(conn, query)
dbGetQuery(conn, 'select * from goods_managers')
goods
dbGetQuery(conn, 'select * from goods_managers')
dbWriteTable(conn, 'goods_managers', goods)
dbGetQuery(conn, 'select * from goods_managers')
dbWriteTable(conn, 'goods_managerssss', goods)
dbGetQuery(conn, 'select * from goods_managerssss')
query <- "drop table goods_managers"
dbGetQuery(conn,query)
library(DBI)
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jre1.8.0_111')
library(rJava)
library(RJDBC) # rJava에 의존적이다.
drv <- JDBC(driverClass="com.mysql.jdbc.Driver",
classPath="C:\\NCS\\python\\util\\mysql-connector-java-5.1.40\\mysql-connector-java-5.1.40\\mysql-connector-java-5.1.40-bin.jar")
conn <- dbConnect(drv, "jdbc:mysql://127.0.0.1:3306/work", "scott", "tiger")
dbListFields(conn, "goods") # conn, table name
query <- "drop table goods_managers purge"
dbGetQuery(conn,query)
query <- "drop table goods_managers purge"
dbSendUpdate(conn,query)
query <- "drop table goods_managers"
dbSendUpdate(conn,query)
query <- "drop table goods_managerssss"
dbSendUpdate(conn,query)
dbGetQuery(conn, 'select * from goods_managerssss')
dbGetQuery(conn, 'select * from goods_managers')
source('C:/NCS/Rwork/R_script/Formal(2_MariaDB).R', encoding = 'UTF-8')
query <- "select * from test order by sid"     # ;은 붙지지 말것
result <- dbGetQuery(conn, query)               # 쿼리문 조회
result
result <- dbGetQuery(conn, query)               # 쿼리문 조회
library(DBI)
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jre1.8.0_111')
library(rJava)
library(RJDBC)
drv<-JDBC("oracle.jdbc.driver.OracleDriver",
"C:\\app\\acorn\\product\\11.2.0\\dbhome_1\\jdbc\\lib\\ojdbc6.jar")     ## 두번째 인자는 oracle의 경로를 지정해줘야 한다.
conn<-dbConnect(drv, "jdbc:oracle:thin:@//127.0.0.1:1521/orcl","scott","tiger")
query <- "select * from test order by sid"     # ;은 붙지지 말것
result <- dbGetQuery(conn, query)               # 쿼리문 조회
result
query <- "select * from test where age>=40"
dbGetQuery(conn, query)
query <- "delete from test where sid=1005"
dbSendUdate(conn, query)
dbSendUpdate(conn, query)
dbGetQuery(conn, 'select * from test order by sid')
emp <- dbGetQuery(conn, 'select * from emp')
str(emp)  ## data.frame':	14 obs. of  8 variables:   --> 14개의 레코드, 8개의 변수
sal <- emp$SAL
sal
sum(sal)
mean(sal)
query <- "select * from emp where sal>=2500 and job = 'MANAGER'"
dbGetQuery(conn,query)
dbGetQuery(conn, 'select * from dept')
(dbGetQuery(conn, 'select * from dept'))
barplot(emp$SAL, main='전체 사원의 연봉 정보',
col = rainbow(nrow(emp)), names.arg = emp$ENAME)
nrow(emp)
ncol(emp)
plot(emp$SAL, main='전체 사원의 연봉 정보',
col = rainbow(nrow(emp)))
plot(emp$SAL, emp$ENAME,  main='전체 사원의 연봉 정보',
col = r,ainbow(nrow(emp)))
plot(emp$SAL, emp$ENAME,  main='전체 사원의 연봉 정보',
col = rainbow(nrow(emp)))
plot(emp$SAL,  main='전체 사원의 연봉 정보',
col = rainbow(nrow(emp)))
result$DNAME <- DNAME
DNAME <- c('회계', '연구', '판매')
result$DNAME <- DNAME
result$DNAME
result
result$DNAME <- DNAME
result
DNAME <- c('회계', '연구', '판매', '인사')
result$DNAME <- DNAME
result$DNAME
result
barplot(result$`SUM(SAL)`, main='부서별 총 연봉', col = rainbow(nrow(result)), name.arg=result$DNAME,
xlab = '부서번호',
ylab = '연봉')
result
result
query <- 'select * from emp '
query <- 'select avg(sal), sum(sal) from emp group by deptno'
result <- dbGetQuery(conn, query)
result
DNAME <- c('회계', '연구', '판매', '인사')
DNAME <- c('회계', '연구', '판매')
result$DNAME <- DNAME
result$DNAME
result
barplot(result$`SUM(SAL)`, main='부서별 총 연봉', col = rainbow(nrow(result)), name.arg=result$DNAME,
xlab = '부서번호',
ylab = '연봉')
dbListFields(conn, "goods") # conn, table name
query <- "select * from goods"
dbGetQuery(conn,query)
library(DBI)
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jre1.8.0_111')
library(rJava)
library(RJDBC) #
drv <- JDBC(driverClass="com.mysql.jdbc.Driver",
classPath="C:\\NCS\\python\\util\\mysql-connector-java-5.1.40\\mysql-connector-java-5.1.40\\mysql-connector-java-5.1.40-bin.jar")
conn <- dbConnect(drv, "jdbc:mysql://127.0.0.1:3306/work", "scott", "tiger")
dbListFields(conn, "goods") # conn, table name
query <- "select * from goods"
dbGetQuery(conn,query)
query <- "select * from goods where dan >= 700000"
dbGetQuery(conn,query)
dbGetQuery(conn, 'select * from goods_managers')
dbSendUpdate(conn, 'drop table goods_managers')
dbGetQuery(conn, 'select * from goods_managers')
dbSendUpdate(conn, 'recycle purge')
str(dataset)
dataset
date # 20150101 -> 2015-01-01   -> date 생성
library(stringr)
year <- str_sub(date,1,4)
month <- str_sub(date,5,6)
day <- str_sub(date,7,8)
year; month; day
sDate <- str_c(year, month, day, sep="-")
sDate
sDate <- as.Date(sDate, '%Y-%m-%d')
sDate
class(sDate)
dataset$Date <- sDate
dataset
install.packages('RMongo')
conn <-mongoDbConnect('local',host="127.0.0.1", port=27017) # local DB 연결
library(rJava)
library(RMongo) # Loading required package: rJava
conn <-mongoDbConnect('local',host="127.0.0.1", port=27017) # local DB 연결
result <-dbGetQuery(mongo, "startup_log", "") # startup_log 컬렉션 전체 검색
result <-dbGetQuery(conn, "startup_log", "") # startup_log 컬렉션 전체 검색
result # starup_log 컬렉션에서 12개의 Document 검색
dbDisconnect(conn)
conn2 <- mongoDbConnect('user_db', host='127.0.0.1')    # 포트를 생략하고 생성해보자. user_db라는 db가 없지만 생성하면서 사용
dbInsertDocument(conn2, 'user_coll', "{'name':'hong', 'age':35, 'gender':'man'}")
result <- dbGetQuery(conn2, "user_coll', "")
result <- dbGetQuery(conn2, "user_coll", "")
dbInsertDocument(conn2, 'user_coll', "{'name':'hong', 'age':35, 'gender':'man'}")
result <- dbGetQuery(conn2, 'user_coll', "")
result
dbRemoveQuery(conn2, 'user_coll', 'name:hong')
dbInsertDocument(conn2, 'user_coll', "{'name':'lee', 'age':45, 'gender':'man'}")
result <- dbGetQuery(conn2, 'user_coll', "")
result
dbInsertDocument(conn2, 'user_coll', "{'name':'Yoo', 'age':18, 'gender':'woman'}")
result <- dbGetQuery(conn2, 'user_coll', "")
result
dbRemoveQuery(conn2, "user_coll", "{'name':'Yoo}")
dbRemoveQuery(conn2, "user_coll", "{'name':'Yoo'}")
result <- dbGetQuery(conn2, 'user_coll', "")
result
dbRemoveQuery(conn2, "user_coll", "{'x_id':'584a02bbabee3863c4db1591'}")
result <- dbGetQuery(conn2, 'user_coll', "")
result
dbRemoveQuery(conn2, "user_coll", "{'X_id':'584a02bbabee3863c4db1591'}")
result <- dbGetQuery(conn2, 'user_coll', "")
result
dbRemoveQuery(conn2, "user_coll", "{'name':'hong'}")
result <- dbGetQuery(conn2, 'user_coll', "")
result
dbInsertDocument(conn2, 'user_coll', "{'name':'hong', 'age':35, 'gender':'man'}")
result <- dbGetQuery(conn2, 'user_coll', "")
result
dim(available.packages())
sessionInfo()
dim(available.packages())
available.packages()
pack <- available.packages()
dim(pack)
sessionInfo()
sessionInfo()
sessionInfo()
source('C:/NCS/Rwork/R_script/Formal(1_Oracle).R', encoding = 'UTF-8')
a <- rnorm(20)    # 난수 정수를 만드는 함수
a
hist(a) # histogram을 그려주는 함수
mean(a)
pdf("c:/NCS/Rwork/output/test.pdf")
hist(a)
dev.off()   # 장치 close
install.packages("stringr")     #install.packages("설치할 패키지 명")
library(stringr)        # 다운받은 패키지를 메모리로 올리는 작업. 메모리 로딩!! 메모리에 올려놔야 사용할 수 있다.
str <- '홍길동35이순신45유관순18'
str_extract_all(str,"[가-히]{3}")
str_extract_all(str,"[0-9]{2}")
str_extract_all(str,"[0-9]{2,}")
str_extract_all(str,"[가-히]{3}")
str_extract_all(str,"[가-히]{1,}")
str_extract_all(str,"[가-히]{4}")
str_extract_all(str,"[가-히]{3}")
str_extract_all(str,"[0-9]{1,}")
str_extract_all(str,"[0-9]{1}")
str_extract_all(str,"[0-9]{2,}")
remove.packages("stringr")
data()
data("Nile")
Nile
length(Nile)
plot(Nile)
hist(Nile)
var <- 0 # int var = 10;
var <- 1
var1 <- 0 # int var = 10;
var1 <- 1
var1
var3 <- 20
var2 <- 10
var1; var2; var3;
ng'
member.pwd <- '1234'
member.name <- '홍길동'
member.age <- '35'
member.id <- 'hong'
member.id <- 'hong'
member.pwd <- '1234'
member.name <- '홍길동'
member.age <- '35'
member.id; member.age
member
age; name
age <- 35
name <- '홍길동'
age; name
age <- c(35, 45, 25)
name <- c('홍길동', '이순신', '유관순')
age; name
age[1]
name[2]
search()
ls()
int <- 100  # 숫자형
string <- "대한민국"  # 문자형
boolean <- TRUE # T or FALSE(F)
int; string; boolean
mode(int); mode(string); mode(boolean)
is.numeric(int)
is.character(string)
is.logical(boolean)
is.character(int)
score <- c(85, 95, NA, 75, 65)
score
mean(score)
mean(score, na.rm = T)  # na.remove => na.rm
sum(score, na.rm = T)
score[is.na(score)] <- 0
score
name <- '홍길동'
age  <- 35
address <- '서울시 용산구'
mode(name); mode(age); mode(address)
is.character(name)
is.numeric(age)
is.numeric(address)
x <- c(10, 20, 30)
mode(x)
x <- c(10, 20, "30")  # 벡터는 같은 자료형만 가질 수 있다.
mode(x)
x
x <- c(10, 20, 30)  # 벡터는 같은 자료형만 가질 수 있다.
x
x1 <- c(10, 20, "30")
mode(x1)    # character
x1
x
num <- as.numeric(x1)   # 문자열 -> 숫자
num
sum(num); plot(num)
sum(num); plot(num)
gender <- c('M', 'F', 'F', 'M', 'M')
gender
plot(gender)
fgender <- as.factor(gender)
gdender
fgender
plot(fgender)
fgender
str(fgender)
fgender2 <- factor(gender, levels = x)
fgender2
plot(fgender2)
fgender2 <- as.factor(gender, levels = x)
gender <- c('M', 'F', 'F', 'M', 'M')
x <- c('M','F') # M=1, F=2
fgender2 <- factor(gender, levels = x)
fgender2
plot(fgender2)
x <- c(4,2,4,2)
f <- as.factor(x)   # numeric -> factor
f
num <- as.numeric(f)
num
s <- as.character(f)
num <- as.numeric(s)
num
x <- c(4,2,4,2)
f <- as.factor(x)   # numeric -> factor
f
s <- as.character(f)
num <- as.numeric(s)
num
Sys.Date()
Sys.time()
today <- '2017-02-27- 12:47:39'
mode(today)
today <- '2017-02-27 12:47:39'
mode(today)
ctoday <- strptime(today, "%Y-%m-%d %H:%M:%S")
mode(ctoday)
class(today)
class(ctoday)    #
class(gender)
class(fgender)
Sys.getlocale()
kdate <- strptime(sdate, "%d-%b-%y")
sdate <- '20-Jun-17' # 2017-06-20
kdate <- strptime(sdate, "%d-%b-%y")
kdate
sdate <- '20-Jun-17' # 2017-06-20
Sys.setlocale(locale = 'English_USA')   # 미국식
kdate <- strptime(sdate, "%d-%b-%y")
kdate
Sys.setlocale(locale = 'LC_COLLATE=Korean_Korea')
Sys.setlocale(locale = 'Korean_Korea')
kdate
gender <- c('M', 'F', 'F', 'M', 'M')
gender
plot(gender)
plot(gender)
fgender <- as.factor(gender)
fgender
plot(fgender)
str(fgender)
x <- c('M','F') # M=1, F=2
fgender2 <- factor(gender, levels = x)
fgender2
plot(fgender2)
gender <- c('M', 'F', 'F', 'M', 'M')
gender
fgender2 <- factor(gender, levels = x)
fgender2
plot(fgender2)
gender <- c('M', 'F', 'F', 'M', 'M')
gender
plot(gender)
x <- c('M','F') # M=1, F=2
fgender2 <- factor(gender, levels = x)
fgender2
plot(fgender2)
gender <- c('M', 'F', 'F', 'M', 'M')
gender
plot(gender)
fgender <- as.factor(gender)
fgender
plot(fgender)
