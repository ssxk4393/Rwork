#####################################
## Chapter08. 고급시각화 분석 
#####################################

# - lattice, latticeExtra, ggplot2, ggmap 패키지
##########################################
# 1. lattice 패키지
#########################################
# The Lattice Plotting System 
# 격자 형태의 그래픽(Trellis graphic) 생성 패키지
# 다차원 데이터를 사용할 경우, 한 번에 여러개의 plot 생성 가능
# 높은 밀도의 plot를 효과적으로 그려준다.
# lattice 패키지의 주요 함수
# xyplot(), barchart(), dotplot(),  stripplot(), cloud(), 
# histogram(), densityplot(), equal.count()
###########################################
available.packages()
install.packages("lattice")
library(lattice)
library(blm)
require(blm)
install.packages("mlmRev")
library(mlmRev)
data(Chem97)
###### Chem97 데이터 셋 설명 ##########
# - mlmRev 패키지에서 제공
# - 1997년 영국 2,280개 학교 31,022명을 대상으로 
#    A레벨(대학시험) 화학점수
# 'data.frame':  31022 obs. of  8 variables:
# score 변수 : A레벨 화학점수(0,2,4,6,8,10)
# gender 변수 : 성별
# gcsescore 변수 : 고등학교 재학중에 치루는 큰 시험(GCSE : 중등교수학능력정 인증시험)
# GCSE : General Certificate of Secondary Education)

str(Chem97) # data.frame':  31022 obs. of  8 variables:
head(Chem97,30) # 앞쪽 30개 레코드 

# 1.histogram(~x축, dataframe)
histogram(~gcsescore, data=Chem97) 
# gcsescore변수를 대상으로 백분율 적용 히스토그램
help()
histogram # histogram(~x축 | 조건, dataframe)
table(Chem97$score) #  0  2  4   6  8  10 <- 빈도수
# score 변수를 조건으로 지정 
histogram(~gcsescore | score, data=Chem97) # score 단위 
histogram(~gcsescore | factor(score), data=Chem97) # score 요인 단위

################################################
# 요인(factor) 수준은 그래픽 출력에 영향을 미친다.
# score를 x축에 대입할 경우 score가 출력되지만,
# factor로 변환된 score를 x축에 대입하면, 요인수준이 
# 순서로 적용된다.(0,2,4,6,8,10)
################################################

# 2.densityplot(~x축 | 조건, dataframe, groups=변수)

densityplot(~gcsescore | factor(score), data=Chem97, 
            groups = gender, plot.points=T, auto.key = T) 
# 밀도 점 : plot.points=F
# 범례: auto.key=T
# 성별 단위(그룹화)로 GCSE점수를 밀도로 플로팅    


# 차트 작성을 위한 데이터 리모델링 
# matrix -> data.freame형식으로 변경
# matrix -> data.table 형식으로 변경

# 1) 데이터셋 가져오기
data(VADeaths)
###### VADeaths 데이터셋 설명 #############
# 1941년 미국 버지니아주의 하위계층 사망비율 
# Rural Male(시골출신 남자), Urban Male(도시출신 남자))
###########################################
VADeaths
str(VADeaths)

# 2) 데이터셋 구조보기
mode(VADeaths) # numeric
class(VADeaths) # matrix

# 3) 데이터 리모델링
# (1) matrix -> data.frame 변환
df <- as.data.frame(VADeaths)
str(df) # 'data.frame':	5 obs. of  4 variables:
class(df) # "data.frame"
df 

# (2) matrix -> data.table 변환
dft <- as.data.frame.table(VADeaths)
str(dft) # 'data.frame':  20 obs. of  3 variables:
class(dft) # "data.frame"
dft # Var1  Var2 Freq -> 1열 기준으로 data.table 생성

# 3.barchart(y~x | 조건, dataframe, layout)
barchart(Var1 ~ Freq | Var2, data=dft, layout=c(4,1))
# Var2변수 단위(그룹화)로 x축-Freq, y축-Var1으로 막대차트 플로팅

# [실습] 0부터 시작
barchart(Var1 ~ Freq | Var2, data=dft, layout=c(4,1), origin=0)


# 4.dotplot(y~x | 조건 , dataframe, layout)
dotplot(Var1 ~ Freq | Var2 , dft) 

# [실습] 1행 4열 <- 결과 동일함
dotplot(Var1 ~ Freq | Var2 , dft, layout=c(4,1)) 

# Var2변수 단위로 그룹화하여 점을 연결하여 플로팅  
dotplot(Var1 ~ Freq, data=dft, groups=Var2, type="o", 
        auto.key=list(space="right", points=T, lines=T)) 
# type="o" : 점 타입 -> 원형에 실선 통과 
# auto.key=list(배치위치, 점 추가, 선 추가) : 범례 


# 5.xyplot(y축~x축| 조건, dataframe or list)
library(datasets)
str(airquality) # datasets의 airqulity 테이터셋 로드

###### airquality 데이터셋 설명 #############
# datasets 패키지에서 제공
# 대기오염에 관한 데이터셋
# 'data.frame':  153 obs. of  6 variables:
airquality # Ozone Solar.R Wind Temp Month(5~9) Day

# airquality의 Ozone(y),Wind(x) 산점도 플로팅
xyplot(Ozone ~ Wind, data=airquality) 
range(airquality$Ozone,na.rm=T)
# Month(5~9)변수 기준으로 플로팅
xyplot(Ozone ~ Wind | Month, data=airquality) # 2행3컬럼 
# default -> layout=c(3,2)
xyplot(Ozone ~ Wind | Month, data=airquality, layout=c(5,1))
# 5컬럼으로 플로팅 - 컬럼 제목 : Month

# [실습] airquality 데이터셋의 Month 타입변경(factor)
convert <- transform(airquality, Month=factor(Month))
str(convert) # Month 변수의 Factor값 확인
# $ Month  : Factor w/ 5 levels "5","6","7","8"

convert # Ozone Solar.R Wind Temp Month Day
xyplot(Ozone ~ Wind | Month, data=convert, layout=c(5,1))
# 컬럼 제목 : Month 값으로 출력

#######################################
# factor로 변환된 Month를 x축에 대입하면, 요인수준이 
# 순서로 적용된다.(5,6,7,8,9)
#######################################
head(quakes)
str(quakes) # 'data.frame':  1000 obs. of  5 variables:
# lat, long, depth, mag, stations
range(quakes$stations)
############## quakes 데이터셋 설명 #################
# R에서 제공하는 기존 데이터셋
# - 1964년 이후 피지(태평양) 근처에 발생한 지진 사건 
#lat:위도,long:경도,depth:깊이(km),mag:리히터규모,stations  
####################################################

# 지진발생 위치(위도와 경로) 
xyplot(lat~long, data=quakes, pch=".") 
# 그래프를 변수에 저장
tplot<-xyplot(lat~long, data=quakes, pch=".")
# 그래프에 제목 추가
tplot2<-update(tplot,
               main="1964년 이후 태평양에서 발생한 지진위치")
print(tplot2)

# depth 이산형 변수 리코딩
# 1. depth변수 범위
range(quakes$depth)# depth 범위
# 40 680
# 2. depth변수 리코딩
quakes$depth2[quakes$depth >=40 & quakes$depth <=150] <- 1
quakes$depth2[quakes$depth >=151 & quakes$depth <=250] <- 2
quakes$depth2[quakes$depth >=251 & quakes$depth <=350] <- 3
quakes$depth2[quakes$depth >=351 & quakes$depth <=450] <- 4
quakes$depth2[quakes$depth >=451 & quakes$depth <=550] <- 5
quakes$depth2[quakes$depth >=551 & quakes$depth <=680] <- 6

# 리코딩된 수심(depth2)변수을 조건으로 산점도 그래프 그리기
convert <- transform(quakes, depth2=factor(depth2))
xyplot(lat~long | depth2, data=convert)


# 동일한 패널에 2개의 y축에 값을 표현
# xyplot(y1+y2 ~ x | 조건, data, type, layout)

xyplot(Ozone + Solar.R ~ Wind | factor(Month), data=airquality,
     col=c("blue","red"),layout=c(5,1))

# 6. equal.count() : 지정된 범위 대상 영역구분과 카운팅

# [실습] 1~150 데이터를 대상으로 겹치지 않게 3개 영역으로 구분
numgroup<- equal.count(1:150, number=4, overlap=0)
numgroup
#Intervals:
#  min   max count
#1  0.5  33.5    33
#2 33.5  67.5    34
#3 67.5 100.5    33

# (1) 지진의 깊이를 5영역으로 구분하여 카운팅
depthgroup<-equal.count(quakes$depth, number=5, overlap=0)
depthgroup
#Intervals:
#    min   max count
#1  39.5  80.5   203
#2  79.5 186.5   203
#3 185.5 397.5   203
#4 396.5 562.5   202
#5 562.5 680.5   200

# (2) depthgroup변수 기준으로 플로팅
xyplot(lat ~ long | depthgroup, data=quakes,
       main="Fiji Earthquakes(depthgruop)",
       ylab="latitude", xlab="longitude", pch="@",col='red' )

# (3) 리히터규모를 2개 영역으로 구분
magnitudegroup<-equal.count(quakes$mag, number=2, overlap=0)
magnitudegroup
#Intervals:
#   min  max count
#1 3.95 4.65   585
#2 4.55 6.45   516
# (4) magnitudegroup변수 기준으로 플로팅
xyplot(lat ~ long | magnitudegroup, data=quakes,
main="Fiji Earthquakes(magjitude)",
ylab="latitude", xlab="longitude", pch="@", col='blue')


# [실습] 수심과 리히터규모를 동시에 표현(2행 5열)
xyplot(lat ~ long | depthgroup*magnitudegroup, data=quakes,
       main="Fiji Earthquakes",
       ylab="latitude", xlab="longitude",
       pch="@",col=c("red","blue"))
# 1행1열 : 수심(39.5 139.5   335), 리히터규모(3.95 4.65   585) 
# 2행1열 : 수심(39.5 139.5   335), 리히터규모(4.55 6.45   516) 

#-------------------------------------
# depth변수 리코딩
quakes$depth3[quakes$depth >=39.5 & quakes$depth <= 80.5] <- 'd1'
quakes$depth3[quakes$depth >=79.5 & quakes$depth <=186.5] <- 'd2'
quakes$depth3[quakes$depth >=185.5 & quakes$depth <=397.5] <- 'd3'
quakes$depth3[quakes$depth >=396.5 & quakes$depth <=562.5] <- 'd4'
quakes$depth3[quakes$depth >=562.5 & quakes$depth <=680.5] <- 'd5'

# mag변수 리코딩
quakes$mag3[quakes$mag >=3.95 & quakes$mag <= 4.65] <- 'm1'
quakes$mag3[quakes$mag >=4.55 & quakes$mag <= 6.45] <- 'm2'
# factor형 변환
convert <- transform(quakes, depth3=factor(depth3), mag3=factor(mag3))

# 산점도 그래프 그리기
xyplot(lat ~ long | depth3*mag3, data=convert,
  main="Fiji Earthquakes",
  ylab="latitude", xlab="longitude",
  pch="@",col=c("red","blue"))

# 7.coplot()
# a조건 하에서 x에 대한 y 그래프를 그린다.
# 형식) coplot(y ~ x : a, data)
# two variantes of the conditioning plot
# http://dic1224.blog.me/80209537545

# 기본 coplot(y~x | a, data, overlap=0.5, number=6, row=2)
# number : 조건의 사이 간격, 
# overlap : 겹치는 구간(0.1~0.9:작을 수록  사이 간격이 적게 겹침) 
# row : 패널 행수
coplot(lat~long | depth, data=quakes) # 2행3열, 0.5, 사이간격 6
coplot(lat~long | depth, data=quakes, overlap=0.1) # 겹치는 구간 : 0.1
coplot(lat~long | depth, data=quakes, number=5, row=1) # 사이간격 5, 1행 5열
coplot(lat~long | depth, data=quakes, number=5, row=1, panel=panel.smooth)
coplot(lat~long | depth, data=quakes, number=5, row=1, 
       col='blue',bar.bg=c(num='green')) # 패널과 조건 막대 색 

# 8.cloud()

# 3차원(위도, 경도, 깊이) 산점도 그래프 플로팅
cloud(depth ~ lat * long , data=quakes,
      zlim=rev(range(quakes$depth)), 
      xlab="경도", ylab="위도", zlab="깊이")

# 테두리 사이즈와 회전 속성을 추가하여 3차원 산점도 그래프 그리기
cloud(depth ~ lat * long , data=quakes,
      zlim=rev(range(quakes$depth)), 
      panel.aspect=0.9,
      screen=list(z=45,x=-25),
      xlab="경도", ylab="위도", zlab="깊이")

# depth ~ lat * long : depth(z축), lat(y축) * long(x축)
# zlim=rev(range(quakes$depth)) : z축값 범위 지정
# panel.aspect=0.9 : 테두리 사이즈
# screen=list(z=105,x=-70) : z,x축 회전
# xlab="Longitude", ylab="Latitude", zlab="Depth" : xyz축 이름
