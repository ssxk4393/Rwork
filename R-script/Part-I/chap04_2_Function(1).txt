#####################################
## Chapter04_2. 함수 
#####################################
# 사용자 정의함수와 내장함수 

# 1. 사용자 정의함수

# 매개변수가 없는 함수 예
f1 <- function(){
  cat("매개변수가 없는 함수")
}

f1() # 함수 호출 

#매개변수가 있는 함수 예
f2 <- function(x){ # 가인수 
  cat("x의 값 = ",x, "\n") # \n 줄바꿈
  print(x) # 변수만 사용
}

f2(10) # 실인수 


# 리턴값이 있는 함수 예
f3 <- function(x, y){
  add <- x + y # 덧셈 
  return(add) # 결과 반환 
}

add <- f3(10, 20)
add


# 통계량을 구하는 함수 
stat <- function(FUNC, data){
  switch (FUNC,
          SUM = sum(data),
          AVG = mean(data),
          VAR = var(data)
  )
}

data <- c(1:10)
stat('SUM', data) # 55
stat('AVG', data) # 5.5
stat('VAR', data) # 9.166667

#파일 불러오기
setwd("c:/Rwork/Part-I")
test <- read.csv("test.csv", header=TRUE)
head(test)

# A 칼럼 요약통계량, 빈도수 구하기 
summary(test) # 요약통계량
table(test$A) # A변수 대상 빈도수 
max(test$A) # 최고 빈도수 
min(test$A) # 최소 빈도수 

# 각 칼럼 단위 요약통계량과 빈도수 구하기
data_pro <- function(x){
  
  for (idx in 1 : length(x)){
    cat(idx,'번째 칼럼의 빈도분석 결과')
    print(table(x[idx]))
    cat('\n')
  }
  for (idx in 1 : length(x)){
    f <- table(x[idx])
    cat(idx,'번째 칼럼의 최댓값/최솟값\n')
    cat("max =", max(f), "min =", min(f), '\n')
  }
}

data_pro(test) #함수 호출


#파타고라스 정의 증명- 식 : a^2+b^2=c^2
pytha <- function(s,t){
  a <- s^2 - t^2
  b <- 2*s*t
  c <- s^2 + t^2
  cat("피타고라스의 정리 : 3개의 변수 : ",a,b,c)
}

pytha(2,1) # s,t는 양의 정수 -> 3 4 5

#결측치(NA) 데이터 처리
data<- c(10,20,5,4,40,7,NA,6,3,NA,2,NA) # 97
data
mean(data, na.rm = T) # NA


#결측치 데이터 처리 함수
na <- function(x){
  #1차 : NA 제거 
  print(x)
  print( mean(x, na.rm = T) )
  
  #2차 : NA를 0으로 대체  
  data = ifelse(!is.na(x), x, 0) # NA이면 0으로 대체
  print(data)
  print(mean(data))
  
  # 3차 : NA를 평균으로 대체 
  data2 = ifelse(!is.na(x), x, round(mean(x, na.rm=TRUE), 2) ) # 평균으로 대체 
  print(data2)
  print(mean(data2))
}
na(data) #함수 호출
# 결측치를 무조건 제거하면 정확한 통계량을 얻을 수 없으며, 데이터가 손실될 수 있다. 

################################
### 몬테카를로 시뮬레이션 
################################
# 현실적으로 불가능한 문제의 해답을 얻기 위해서 난수의 확률분포를 이용하여 
# 모의시험으로 근사적 해를 구하는 기법

# 동전 앞/뒤 난수 확률분포 함수 
coin <- function(n){
  r <- runif(n, min=0, max=1)
  #print(r) # n번 시행 
  
  result <- numeric()
  for (i in 1:n){
    if (r[i] <= 0.5)
      result[i] <- 0 # 앞면 
    else 
      result[i] <- 1 # 뒷면
  }
  return(result)
}
coin(10) # 시행 횟수 : 10회  

# 몬테카를로 시뮬레이션 
montaCoin <- function(n){
  cnt <- 0
  for(i in 1:n){
    cnt <- cnt + coin(1) # 동전 함수 호출 
  }
  result <- cnt / n
  return(result)
}

montaCoin(10) # 0.3

montaCoin(30) # 0.5666667

montaCoin(100) # 0.53

montaCoin(1000) #  0.51

montaCoin(10000) # 0.5033