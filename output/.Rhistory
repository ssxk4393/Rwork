pay <- as.numeric(str_replace_all(pay, "[가-히]{1}", ""))
pay
tot <- sum(pay)/length(pay)
tot
emp_pay <- function(x) {
pay <- str_extract_all(EMP, "[가-히]{1}[0-9]{3}")
pay <- as.numeric(str_replace_all(pay, "[가-히]{1}", ""))
tot <- sum(pay)/length(pay)
cat("전체 급여 평균 : ", tot)
cat("평균 이상 급여 수령자")
for(m in x){
pay <- str_extract_all(m, "[가-히]{1}[0-9]{3}")
pay <- as.numeric(str_replace_all(pay, "[가-히]{1}", ""))
if(pay >= tot){
name <- str_extract_all(m, "[가-히]{3}")
cat(name, "=>", pay)
}
}
}
emp_pay(EMP)
EMP <- c("2014홍길동220", "2002이순신300", "2010유관순260")
emp_pay <- function(x) {
pay <- str_extract_all(EMP, "[가-히]{1}[0-9]{3}")
pay <- as.numeric(str_replace_all(pay, "[가-히]{1}", ""))
tot <- sum(pay)/length(pay)
cat("전체 급여 평균 : ", tot)
cat("평균 이상 급여 수령자")
for(m in x){
pay <- str_extract_all(m, "[가-히]{1}[0-9]{3}")
pay <- as.numeric(str_replace_all(pay, "[가-히]{1}", ""))
if(pay >= tot){
name <- str_extract_all(m, "[가-히]{3}")
cat(name, "=>", pay)
}
}
}
emp_pay(EMP)
pay <- str_extract_all(EMP, "[가-히]{1}[0-9]{3}")
pay <- as.numeric(str_replace_all(pay, "[가-히]{1}", ""))
pay
class(pay)
mode(pay)
str(pay)
mode(pay)
pay <- str_extract_all(m, "[가-히]{1}[0-9]{3}")
pay <- as.numeric(str_replace_all(pay, "[가-히]{1}", ""))
pay
emp_pay <- function(x) {
pay <- str_extract_all(EMP, "[가-히]{1}[0-9]{3}")
pay <- as.numeric(str_replace_all(pay, "[가-히]{1}", ""))
tot <- sum(pay)/length(pay)
cat("전체 급여 평균 : ", tot)
cat("평균 이상 급여 수령자")
for(m in x){
pay <- str_extract_all(m, "[가-히]{1}[0-9]{3}")
pay <- as.numeric(str_replace_all(pay, "[가-히]{1}", ""))
cat(pay)
if(pay >= tot){
name <- str_extract_all(m, "[가-히]{3}")
cat(name, "=>", pay)
}
}
}
emp_pay(EMP)
emp_pay <- function(x) {
pay <- str_extract_all(EMP, "[가-히]{1}[0-9]{3}")
pay <- as.numeric(str_replace_all(pay, "[가-히]{1}", ""))
tot <- sum(pay)/length(pay)
cat("전체 급여 평균 : ", tot)
cat("\n평균 이상 급여 수령자")
for(m in x){
pay <- str_extract_all(m, "[가-히]{1}[0-9]{3}")
pay <- as.numeric(str_replace_all(pay, "[가-히]{1}", ""))
cat("\n\n",pay)
if(pay >= tot){
name <- str_extract_all(m, "[가-히]{3}")
cat(name, "=>", pay)
}
}
}
emp_pay(EMP)
emp_pay <- function(x) {
pay <- str_extract_all(EMP, "[가-히]{1}[0-9]{3}")
pay <- as.numeric(str_replace_all(pay, "[가-히]{1}", ""))
tot <- sum(pay)/length(pay)
cat("전체 급여 평균 : ", tot)
cat("\n평균 이상 급여 수령자")
for(m in x){
pay <- str_extract_all(m, "[가-히]{1}[0-9]{3}")
pay <- as.numeric(str_replace_all(pay, "[가-히]{1}", ""))
name <- str_extract_all(m, "[가-히]{3}")
cat("\n\n",pay, name)
if(pay >= tot){
cat(name, "=>", pay)
}
}
}
emp_pay(EMP)
emp_pay <- function(x) {
pay <- str_extract_all(EMP, "[가-히]{1}[0-9]{3}")
pay <- as.numeric(str_replace_all(pay, "[가-히]{1}", ""))
tot <- sum(pay)/length(pay)
cat("전체 급여 평균 : ", tot)
cat("평균 이상 급여 수령자")
for(m in x){
pay <- str_extract_all(m, "[가-히]{1}[0-9]{3}")
pay <- as.numeric(str_replace_all(pay, "[가-히]{1}", ""))
cat(pay)
if(pay >= tot){
name <- str_extract_all(unlist(m), "[가-히]{3}")
cat(name, "=>", pay)
}
}
}
emp_pay(EMP)
emp_pay <- function(x) {
pay <- str_extract_all(EMP, "[가-히]{1}[0-9]{3}")
pay <- as.numeric(str_replace_all(pay, "[가-히]{1}", ""))
tot <- sum(pay)/length(pay)
cat("전체 급여 평균 : ", tot)
cat("평균 이상 급여 수령자")
for(m in x){
pay <- str_extract_all(m, "[가-히]{1}[0-9]{3}")
pay <- as.numeric(str_replace_all(pay, "[가-히]{1}", ""))
cat(pay)
if(pay >= tot){
name <- unlist(str_extract_all(m, "[가-히]{3}"))
cat(name, "=>", pay)
}
}
}
emp_pay(EMP)
pytha <- function(s,t){
a <- s^2 - t^2
b <- 2*s*t
c <- s^2 + t^2
cat("피타고라스의 정리 : 3개의 변수 : ",a,b,c)
}
pytha(2,1) # s,t는 양의 정수 -> 3 4 5
emp_pay <- function(x) {
pay <- str_extract_all(EMP, "[가-히]{1}[0-9]{3}")
pay <- as.numeric(str_replace_all(pay, "[가-히]{1}", ""))
tot <- sum(pay)/length(pay)
cat("전체 급여 평균 : ", tot)
cat("평균 이상 급여 수령자")
for(m in x){
pay <- str_extract_all(m, "[가-히]{1}[0-9]{3}")
pay <- as.numeric(str_replace_all(pay, "[가-히]{1}", ""))
cat(pay)
if(pay >= tot){
name <- unlist(str_extract_all(m, "[가-히]{3}"))
cat(name, "=>", pay,"\n")
}
}
}
emp_pay(EMP)
emp_pay <- function(x) {
pay <- str_extract_all(EMP, "[가-히]{1}[0-9]{3}")
pay <- as.numeric(str_replace_all(pay, "[가-히]{1}", ""))
tot <- sum(pay)/length(pay)
cat("전체 급여 평균 : ", tot)
cat("평균 이상 급여 수령자")
for(m in x){
pay <- str_extract_all(m, "[가-히]{1}[0-9]{3}")
pay <- as.numeric(str_replace_all(pay, "[가-히]{1}", ""))
if(pay >= tot){
name <- unlist(str_extract_all(m, "[가-히]{3}"))
cat(name, "=>", pay,"\n")
}
}
}
emp_pay(EMP)
emp_pay <- function(x) {
pay <- str_extract_all(EMP, "[가-히]{1}[0-9]{3}")
pay <- as.numeric(str_replace_all(pay, "[가-히]{1}", ""))
tot <- sum(pay)/length(pay)
cat("전체 급여 평균 : ", tot)
cat("\n평균 이상 급여 수령자\n")
for(m in x){
pay <- str_extract_all(m, "[가-히]{1}[0-9]{3}")
pay <- as.numeric(str_replace_all(pay, "[가-히]{1}", ""))
if(pay >= tot){
name <- unlist(str_extract_all(m, "[가-히]{3}"))
cat(name, "=>", pay,"\n")
}
}
}
emp_pay(EMP)
pay <- str_extract_all(EMP, "[가-히]{1}[0-9]{3}")
pay <- as.numeric(str_replace_all(pay, "[가-히]{1}", ""))
class(pay)
mode(pay)
type(pay)
typeof(pay)
pay <- str_extract_all(EMP, "[가-히]{1}[0-9]{3}")
class(pay)
mode(pay)
pay <- as.numeric(str_replace_all(pay, "[가-히]{1}", ""))
pytha(2,3) # s,t는 양의 정수 -> 3 4 5
pytha(4,3) # s,t는 양의 정수 -> 3 4 5
pytha(2,1) # s,t는 양의 정수 -> 3 4 5
seq(-2, 2, by=.2) # 0.2씩 증가
seq(length=10, from=-5, by=.2) # -5부터 10개 생성
sample(0:100, 20) # 0~100사이의 20개 sample 생성
runif(20, min=0, max=100) # 0~100사이의 20개 난수 생성
sample(0:100, 20) # 0~100사이의 20개 sample 생성
sample(0:100, 20) # 0~100사이의 20개 sample 생성
vec<-1:10
min(vec)
max(vec)
range(vec)
mean(vec) # 평균
median(vec) # 중위수
sum(vec)
prod(vec) # 데이터의 곱
prod(vec) # 데이터의 곱
factorial(5) # 팩토리얼=120
abs(-5)  # 절대값
sd(rnorm(10)) # 표준편차 구하기
var(rnorm(10))
table(vec) # 빈도수
sqrt(16) # 4
4^2 # 16
5%%3 # 2
6%%2 # 0
log(10) # 10의 자연로그(밑수가 e)
log10(10) # 10의 일반로그(밑수 10)
getwd()
getwd()
setwd("c:/NCS/Rwork/Part-I")
excel <- read.csv("excel.csv", header=TRUE)
head(excel, 10)
colMeans(excel[1:5])
rowMeans(excel[1:5])
rowMeans(excel[1:5])
summary(excel) # 요약통계량 = 기술통계량
summary(excel) # 요약통계량 = 기술통계량
rowMeans(excel[1:5])
summary(excel) # 요약통계량 = 기술통계량
source('C:/NCS/Rwork/R-script/chap04_2_Function.R', encoding = 'UTF-8')
colSums(excel[1:3])
colSums(excel[1:5])
rowSums(excel[1:5])
x <- c(1.5, 2.5, -1.3, 2.5)
x
round(mean(x)) # 1.3 -> 1
ceiling(mean(x)) # x보다 큰 정수
floor(mean(x)) # 1보다 작은 정수
round(x)
ceiling(x)
x1 <- c(2,3,4,1,5,6) # 짝수 = ([n/2] + [n/2+1]) / 2
median(x1)
sx1 <- sort(x1)
sx1 # 1 2 3 4 5 6
median(sx1) # 3.5 # [3] + [4] / 2 -> 3.5
x2 <- c(2,3,4,1,5) # 홀수 = ceiling([n/2])
sx2 <- sort(x2)
x2 <- c(2,3,4,1,5) # 홀수 = ceiling([n/2])
median(x2)
sx2 <- sort(x2)
sx2 # 1 2 3 4 5
median(sx2) # 3
med(x1) # 3.5
med <- function(x){
x <- sort(x)
len <- length(x)
if(len%%2==0){
return(result <- (x[len/2]+x[len/2+1])/2)
}else{
return(x[ceiling(len/2)])
}
}
med(x1) # 3.5
x1 <- c(2,3,4,1,5,6) # 짝수 = ([n/2] + [n/2+1]) / 2
x2 <- c(2,3,4,1,5) # 홀수 = ceiling([n/2])
med(x1) # 3.5
med <- function(x){
x <- sort(x)
len <- length(x)
if(len%%2==0){
return(result <- (x[len/2]+x[len/2+1])/2)
}else{
return(x[ceiling(len/2)])
}
}
med(x1) # 3.5
med(x2) # 3
med(x1) # 3.5
med(x2) # 3
x1 <- c(2,3,4,1,5,6) # 짝수 = ([n/2] + [n/2+1]) / 2
med(x1) # 3.5
med <- function(x){
x <- sort(x)
len <- length(x)
if(len%%2==0){
return((x[len/2]+x[len/2+1])/2)
}else{
return(x[ceiling(len/2)])
}
}
med(x1) # 3.5
med(x2) # 3
rnorm(20, mean = 0, sd = 1) # 표준정규분포를 따르는 20개 데이터 생성
r2 <- runif(n, min=0, max=1) # 0 < r2 < 1
r2
runif(20, min=0, max=100) # 0~100사이의 20개 난수 생성
?rnorm
n <- 1000
r <- rnorm(n, mean = 0, sd = 1)
r
hist(r) # 대칭성
n <- 100000
r <- rnorm(n, mean = 0, sd = 1)
hist(r) # 대칭성
r
hist(r) # 대칭성
r2 <- runif(n, min=0, max=1) # 0 < r2 < 1
r2
n <- 1000
r2 <- runif(n, min=0, max=1) # 0 < r2 < 1
r2
r <- rnorm(n, mean = 0, sd = 1)
r
r2 <- runif(n, min=-1, max=1) # 0 < r2 < 1
r2
hist(r2)
r2 <- runif(n, min=0, max=1) # 0 < r2 < 1
r2
hist(r2)
r2 <- runif(n, min=0, max=1) # 0 < r2 < 1
r2
hist(r2)
r2 <- runif(n, min=0, max=1) # 0 < r2 < 1
hist(r2)
n <- 100000
r2 <- runif(n, min=0, max=1) # 0 < r2 < 1
hist(r2)
set.seed(123) # seed()함수를 실행하면 같은 값으로 난수 생성
n <- 10
r3 <- rbinom(n, 1, 0.5) # 1개 size에서 1/2(0.5)확률로 난수 정수 생성
r3 #  0 1 0 1 1 0 1 1 1 0
n <- 10
r3 <- rbinom(n, 1, 0.5) # 1개 size에서 1/2(0.5)확률로 난수 정수 생성
r3 <- rbinom(n, 1, 0.25) # 1개 size에서 1/4(0.25)확률로 난수 정수 생성
r3 #  1 0 0 1 0 0 0 0 0 0
r3 <- rbinom(n, 3, 0.5) # 3개 size에서 1/2(0.5)0.5확률로 난수 정수 생성
r3 #  3 1 2 2 0 3 1 0 1 3
n <- 10
r3 <- rbinom(n, 1, 0.5) # 1개 size에서 1/2(0.5)확률로 난수 정수 생성
r3 #  0 1 0 1 1 0 1 1 1 0
r3 <- rbinom(n, 1, 0.5) # 1개 size에서 1/2(0.5)확률로 난수 정수 생성
r3 #  0 1 0 1 1 0 1 1 1 0
set.seed(123) # seed()함수를 실행하면 같은 값으로 난수 생성
n <- 10
r3 <- rbinom(n, 1, 0.5) # 1개 size에서 1/2(0.5)확률로 난수 정수 생성
r3 <- rbinom(n, 1, 0.25) # 1개 size에서 1/4(0.25)확률로 난수 정수 생성
r3 #  1 0 0 1 0 0 0 0 0 0
r3 <- rbinom(n, 1, 1) # 1개 size에서 1/2(0.5)확률로 난수 정수 생성
r3 #  0 1 0 1 1 0 1 1 1 0
r3 <- rbinom(n, 1, 0.9) # 1개 size에서 1/2(0.5)확률로 난수 정수 생성
r3 #  0 1 0 1 1 0 1 1 1 0
r3 <- rbinom(n, 1, 0.8) # 1개 size에서 1/2(0.5)확률로 난수 정수 생성
r3 #  0 1 0 1 1 0 1 1 1 0
r3 <- rbinom(n, 1, 0.8) # 1개 size에서 1/2(0.5)확률로 난수 정수 생성
r3 #  0 1 0 1 1 0 1 1 1 0
r3 <- rbinom(n, 1, 0.25) # 1개 size에서 1/4(0.25)확률로 난수 정수 생성
r3 #  1 0 0 1 0 0 0 0 0 0
r3 <- rbinom(n, 3, 0.5) # 3개 size에서 1/2(0.5)0.5확률로 난수 정수 생성
r3 #  3 1 2 2 0 3 1 0 1 3
r3 <- rbinom(n, 3, 0.5) # 3개 size에서 1/2(0.5)0.5확률로 난수 정수 생성
r3 #  3 1 2 2 0 3 1 0 1 3
r3 <- rbinom(n, 3, 0.5) # 3개 size에서 1/2(0.5)0.5확률로 난수 정수 생성
r3 #  3 1 2 2 0 3 1 0 1 3
set.seed(234)
r3 <- rbinom(n, 1, 0.5) # 1개 size에서 1/2(0.5)확률로 난수 정수 생성
r3 #  0 1 0 1 1 0 1 1 1 0
rnorm(5, 0, 1)
set.seed(123)   # 임의의 정수만 넣어주면
rnorm(5, 0, 1)
set.seed(123)   # 임의의 정수만 넣어주면
rnorm(5, 0, 1)
set.seed(123)   # 임의의 정수만 넣어주면
rnorm(5, 0, 1)
rnorm(5, 0, 1)
rnorm(5, 0, 1)
rnorm(5, 0, 1)
set.seed(123)   # 임의의 정수만 넣어주면
rnorm(5, 0, 1)
set.seed(123)   # 임의의 정수만 넣어주면
rnorm(5, 0, 1)
set.seed(345)
rnorm(5, 0, 1)
set.seed(345)
rnorm(5, 0, 1)
sample(10, 5)
sample(1:10, 5)
sample(2:10, 5)
sample(10, 10)
sample(2:10, 10)
sample(2:10, 9)
sample(20:100, 5)
no <- c(1:5)
score <- c(10,30,40,10,50)
df <- data.frame(no,score)
df
nrow(df)
sample(nrow(df), nrow(df)*0.7)
sample(nrow(df), nrow(df)*0.7)  # 70%만 사용하겠다.
sample(nrow(df), nrow(df)*0.7)  # 70%만 사용하겠다.
idx <- sample(nrow(df), nrow(df)*0.7)  # 70%만 사용하겠다.
train <- df[idx,]
train
test <- df[-idx,]
test
train   # 70% - 학습데이터
train <- df[sort(idx),]
train   # 70% - 학습데이터
train <- df[idx,]
train   # 70% - 학습데이터
install.packages("RSADBE")
library(RSADBE)
data
data()
Bug_Metrics_Software
RSADBE::Bug_Metrics_Software
data()
data.Bug_Metrics_Software
read(Bug_Metrics_Software)
read.table(Bug_Metrics_Software)
data()
data(package = rsadbe.packages(all.available = TRUE))
data(package = RSADBE.packages(all.available = TRUE))
data(Bug_Metrics_Software)
Bug_Metrics_Software
class(Bug_Metrics_Software)
mode()
mode(Bug_Metrics_Software)
Bug_Metrics_Software[,,2]
Bug_Metrics_Software
class(Bug_Metrics_Software)
Bug_Metrics_Software[1]
Bug_Metrics_Software[,1]
Bug_Metrics_Software[1,]
Bug_Metrics_Software[[1]]
Bug_Metrics_Software[1,1
Bug_Metrics_Software[1,1]
Bug_Metrics_Software[1,1]
Bug_Metrics_Software[,,after]
Bug_Metrics_Software[,,After]
Bug_Metrics_Software
()
data()
str(Bug_Metrics_Software)
head(Bug_Metrics_Software)
Bug_Metrics_Software
str(Bug_Metrics_Software)
Bug_Metrics_Software[1:5,1:5,1:2]
Bug_Metrics_Software[1,,]
Bug_Metrics_Software
Bug_Metrics_Software[1,,]
Bug_Metrics_Software[1,1,1]
Bug_Metrics_Software[,,1]
Bug_Metrics_Software[,,1]
Bug_Metrics_Software[1,,]
Bug_Metrics_Software[,1,]
Bug_Metrics_Software[,1,]
Bug_Metrics_Software[,,1]
Bug_Metrics_Software[,,2]
Bug_Metrics_Software[1,,]
Bug_Metrics_Software[,,2]
df <- Bug_Metrics_Software[,,2]
df
class(df)
mode(df)
colMeans(df[1:5])
colMeans(df[,1:5])
df
rowSums(df[1:5,])
summary(df)
summary(df[,1:5])
colMeans(df[,1:5])
dff <- df[,1:5]
summary(dff)
as.matrix(df)
df <- as.matrix(df)
summary(df)
df <- as.table(df)
summary(df)
summary(test) # 요약통계량
class(test)
df <- as.data.frame(df)
summary(df)
df
df <- Bug_Metrics_Software[,,2]
df
class(df)
df <- as.data.frame(df)
class(df)
df
df <- Bug_Metrics_Software[,,2]
class(df)
str(df)
plot(iris[,1,], iris[,2,], xlab = "Sepal L", ylab ="Petal L", main="iris Length")
attributes(iris)
plot(iris[,1,], iris[,2,], xlab = "Sepal L", ylab ="Petal L", main="iris Length", col=iris$Species)
title(main="iris 데이터 테이블 산포도 차트")
plot(iris[,1,], iris[,2,], xlab = "Sepal L", ylab ="Petal L", col=iris$Species)
title(main="iris 데이터 테이블 산포도 차트")
setwd("c:/NCS/Rwork/output")
jpeg("exam_iris.jpg", width=720, height=480)
plot(iris[,1], iris[,2], xlab = "Sepal L", ylab ="Petal L", col=iris$Species, main="iris 데이터 테이블 산포도 차트")
dev.off() # 장치 종료
